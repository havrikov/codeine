[resources]
# RAM amount in gb
ram = 16

[ExperimentConfig]
tool_dir = ./tools
experiment_dir = ../codeine-experiments
gini_threshold = 0.3
max_k = 4
# how many methods of a subject to evaluate on
number_of_methods = 1000
# do not consider constructors in the evaluation
ignore_constructors = true
# let tribble cache grammar files so it does not have to re-parse them on each invocation
use_grammar_caching = true
# remove the randomly generated files after we have acquired the execution metrics to save space
# this does not apply to the guided approaches such as whole-tree, gini-based, or support-based
remove_randomly_generated_files = true

# which mode to use when generating the initial inputs to learn from.
# execute tribble with --help to find out more about available modes.
initial_inputs_generation_mode = 30-depth-random-1000

# the prefix of the mode to use for generating random files to compare against those generated with the learned trees.
# concatenating a number to the prefix is expected to produce a valid tribble generation mode.
generation_mode_prefix = 30-depth-random-

# The fraction of inputs the features may have the same value. Must be in [0,0.5].
feature_variance_threshold = 0
# The fraction of inputs the method coverage may have the same value. Must be in [0,0.5].
method_variance_threshold = 0
# Use subsampling to get an equal distribution of covered and non-covered methods
use_subsampling = true
# If we use subsampling, we can bias it so that covering inputs are never removed from the training set
subsample_bias = false

# The maximum depth of the trained decision trees
max_tree_depth = 5

# The maximum number of the same declarations on the path from the root to a leaf
max_rule_occurrences = 5

# The minimum fraction of samples that are required to form a decision tree leaf.
# Alternatively an int describing how many samples must at least be in a leaf.
min_samples_leaf = 1

# Additionally evaluate the generative power of the tree paths with the strongest support
evaluate_strongest_support = false
# Additionally evaluate the generative power of the tree paths with the lowest gini
evaluate_lowest_gini = false

# Enable evaluating how often the targeted method is executed between whole-tree and random approaches
evaluate_target_method_execution_count = true
# Add an evaluation of how often methods other than the targeted method are executed between whole-tree and random approaches
evaluate_bycatch_execution_count = false

[core]
no_configure_logging = True
default_scheduler_port = 8089
local_scheduler = False

[scheduler]
retry_count = 0
